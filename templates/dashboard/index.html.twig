{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}
<div class="dashboard-container">
    <h1>{{ 'dashboard.title' | trans }}</h1>

    <div class="dashboard-container__content">
      <h2>{{ 'dashboard.subtitle' | trans }}</h2>

      <div class="dashboard-container__content__text">
        {{ 'dashboard.description' | trans }}
      </div>
      <div class="dashboard-container__content__totals">
        {% set totalAmountInvested = 0 %}
        {% set totalAmountEarned = 0 %}
        {% for portfolio in app.user.portfolios %} 
          {% for asset in portfolio.assets %} 
            {% set totalAmountInvested = totalAmountInvested + (asset.amount * asset.getBoughtPrice()) %}
            {% for newprice in newData %}
              {% if newprice.name == asset.name %}
                {% set totalAmountEarned = totalAmountEarned + (newprice.price * asset.amount) %}
              {% endif %}
            {% endfor %}
          {% endfor %} 
        {% endfor %}
        <h3>{{ 'dashboard.total_invested' | trans }}:
          <b>{{ totalAmountInvested }}</b>
        </h3>
        <h3>{{ 'dashboard.total_earned' | trans }}:
          <b style="color: {{totalAmountEarned - totalAmountInvested > 0 ? "green" : "red" }}" >{{ (totalAmountEarned - totalAmountInvested)|number_format(2, '.', ',') }}</b>
        </h3>
      </div>

      <div class="dashboard-container__content__chart">
        <canvas id="myChart" width="300" height="200"></canvas>
      </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
    <script>
      var ctx = document.getElementById('myChart').getContext('2d');
      let portfolios = [
        {% for portfolio in app.user.portfolios %}
          {
            name: "{{ portfolio.name }}",
            totalAmountInvested: {% for asset in portfolio.assets %} ({{ asset.amount }} * {{ asset.getBoughtPrice() }}) + {% endfor %} 0,
            totalAmountEarned: {% for asset in portfolio.assets %} {% for newprice in newData %} {% if newprice.name == asset.name %} ({{ newprice.price }} * {{ asset.amount }} - (({{ asset.amount }} * {{ asset.getBoughtPrice() }}) ) {% endif %} {% endfor %}) + {% endfor %} 0,
          },
        {% endfor %}
      ];
  
      let portNames = [];
      let portEarned = [];
      for (let i = 0; i < portfolios.length; i++) {
        portNames.push(portfolios[i].name);
        portEarned.push(portfolios[i].totalAmountEarned);
      }
      let portColors = [];
      for (let i = 0; i < portNames.length; i++) {
        portColors.push('#'+(i+1)+'f'+(i+1)+'f'+(i+1)+'f');
      }
      let portBorderColors = [];
      for (let i = 0; i < portEarned.length; i++) {
        portBorderColors.push(portEarned[i] > 0 ? 'green' : 'red');
      }
      var myChart = new Chart(ctx, {
          type: 'bar',
          data: {
              labels: portNames,
              datasets: [{
                  label: 'Evolution of your investments',
                  data: portEarned,
                  backgroundColor: portColors,
                  borderColor: portBorderColors,
                  borderWidth: 2
              }]
          },
          options: {
              scales: {
                  yAxes: [{
                      ticks: {
                          beginAtZero: true,
                          callback: function(value, index, values) {
                            return '$' + value;
                          }
                      },
                      scaleLabel: {
                        display: true,
                        labelString: 'Total amount earned or lost',
                        fontSize: 16
                      }
                  }],
                  xAxes: [{
                    scaleLabel: {
                      display: true,
                      labelString: 'Portfolios',
                      fontSize: 16
                    }
                  }]
              },
              legend: {
                display: false
              },
              tooltips: {
                callbacks: {
                  label: function(tooltipItem, data) {
                    return (tooltipItem.yLabel > 0 ? 'Earned: ' : 'Lost: ') + '$ ' + tooltipItem.yLabel.toFixed(2);
                  }
                },
                titleFontSize: 14
              },
              title: {
                display: true,
                text: "{{ 'dashboard.evolution' | trans }}",
                fontSize: 20
              }
          }
      });
    </script>
</div>
{% endblock %}
